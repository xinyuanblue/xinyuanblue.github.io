# /etc/nginx/conf.d/heluoshuyuan.cn.conf

# --- 主要的 HTTPS 服务器块 (处理 heluoshuyuan.cn) ---
server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;

    server_name heluoshuyuan.cn; # 只处理主域名

    root /var/www/heluoshuyuan.cn; # 你的网站文件根目录
    index index.html;

    # --- Certbot 添加的 SSL 配置 ---
    ssl_certificate /etc/letsencrypt/live/heluoshuyuan.cn/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/heluoshuyuan.cn/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    # --- End Certbot SSL 配置 ---

    # 处理根路径和其他静态文件
    location / {
        try_files $uri $uri/ /index.html; # 如果是单页应用，可能需要指向 /index.html
    }

    # 缓存静态资源
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1M;
        add_header Cache-Control "public";
        access_log off;
    }

    # === 新增：反向代理 Mapbox API ===
    location /api/mapbox/ {
        # 去掉前缀
        rewrite ^/api/mapbox/(.*) /$1 break;
        
        # 代理到真实的Mapbox API
        proxy_pass https://api.mapbox.com/;
        proxy_ssl_server_name on;
        proxy_set_header Host api.mapbox.com;
        
        # 添加Mapbox访问令牌 (如果在前端代码中已经包含则可以省略)
        proxy_set_header Authorization "mapbox.accessToken=pk.eyJ1IjoieGlueXVhbmJsdWUiLCJhIjoiY203cHhybnp3MHYxZzJscHJyYnYwMHMzZyJ9.9Be1af0pb9DVIlt5PJ8COQ";
        
        # 设置代理头
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 超时设置
        proxy_connect_timeout 10s;
        proxy_read_timeout 30s;
        proxy_send_timeout 30s;
        
        # 缓存设置
        proxy_cache_valid 200 302 1h;
        proxy_cache_valid 404 1m;
        
        # 添加CORS头
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
    }
    
    # === 新增：代理 Mapbox 瓦片服务 ===
    location ~ ^/api/mapbox/tiles/(.*)$ {
        # 提取瓦片服务器域名和路径
        set $tile_path $1;
        
        # 代理到真实的Mapbox瓦片服务器
        proxy_pass https://a.tiles.mapbox.com/$tile_path$is_args$args;
        proxy_ssl_server_name on;
        proxy_set_header Host a.tiles.mapbox.com;
        
        # 如果第一个服务器返回错误，尝试其他服务器
        proxy_next_upstream error timeout http_404;
        
        # 添加Mapbox访问令牌
        proxy_set_header Authorization "mapbox.accessToken=pk.eyJ1IjoieGlueXVhbmJsdWUiLCJhIjoiY203cHhybnp3MHYxZzJscHJyYnYwMHMzZyJ9.9Be1af0pb9DVIlt5PJ8COQ";
        
        # 设置缓存
        proxy_cache_valid 200 302 7d;  # 瓦片缓存7天
        proxy_cache_key "$host$request_uri$is_args$args";
        
        # 设置代理头
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 增加瓦片相关的响应头
        add_header Cache-Control "public, max-age=604800";  # 7天缓存
        add_header Access-Control-Allow-Origin "*";
    }

    # === 保留原有：反向代理 Flask API (等时圈计算) ===
    location /api/isochrone {
        # 将请求转发给本地运行的 Flask 应用 (监听在 5001 端口)
        proxy_pass http://127.0.0.1:5001; # Flask 监听的地址和端口

        # --- 设置必要的请求头 ---
        proxy_set_header Host $host; # 传递原始主机名
        proxy_set_header X-Real-IP $remote_addr; # 传递真实客户端 IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 传递代理链信息
        proxy_set_header X-Forwarded-Proto $scheme; # 传递原始协议 (https)

        # --- 可选：增加超时时间 ---
        # proxy_connect_timeout 60s;
        # proxy_read_timeout 60s;
        # proxy_send_timeout 60s;

        # --- 可选：处理 Keep-Alive 和 Upgrade (如果需要，例如 WebSocket) ---
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection 'upgrade';
    }
    # === 反向代理配置结束 ===

    # 隐藏 Nginx 版本号
    server_tokens off;

    # 允许 Let's Encrypt 的验证路径
    location ~ /.well-known/acme-challenge/ {
        allow all;
        root /var/www/heluoshuyuan.cn; # 确保验证文件可访问
    }
}

# --- HTTP (端口 80) 请求处理 ---
# 将所有 HTTP 请求重定向到 HTTPS (非 www 版本)
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name _ heluoshuyuan.cn www.heluoshuyuan.cn; # 捕获所有到 80 端口的请求

    # 统一重定向到 https://heluoshuyuan.cn
    return 301 https://heluoshuyuan.cn$request_uri;
}

# 可选：如果你希望 www.heluoshuyuan.cn 也通过 HTTPS 访问，但最终跳转到非 www 版本
# 你可以为 www 创建一个单独的 HTTPS server 块进行重定向，或者保持现状由你的应用逻辑处理。
# 但更推荐的方式是在上面的 443 server 块中将 www 也加入 server_name 并配置好证书，
# 然后再决定是否用 return 301 将 www 跳转到非 www。
# 例如 (如果证书包含 www):
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name www.heluoshuyuan.cn;
#
#     ssl_certificate /etc/letsencrypt/live/heluoshuyuan.cn/fullchain.pem; # 使用相同的证书
#     ssl_certificate_key /etc/letsencrypt/live/heluoshuyuan.cn/privkey.pem;
#     include /etc/letsencrypt/options-ssl-nginx.conf;
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
#
#     return 301 https://heluoshuyuan.cn$request_uri; # 永久重定向到非 www
# }

# === 新增：Nginx缓存配置 ===
# 这部分需要添加到http段，不能放在server段内
# 如果你的主配置中已有这些设置，可以忽略或合并

# 在服务器的nginx.conf主配置文件中添加:
# proxy_cache_path /var/cache/nginx/mapbox levels=1:2 keys_zone=mapbox_cache:10m max_size=1g inactive=7d;
# proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
# proxy_cache_lock on;
# proxy_cache_background_update on;